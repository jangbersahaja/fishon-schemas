{"version":3,"sources":["../src/index.ts","../src/charter.ts","../src/charter-update.ts","../src/draft.ts","../src/media.ts","../src/video.ts","../src/video-upload-types.ts"],"sourcesContent":["/**\n * Consolidated schema and type definitions\n * \n * This folder contains all runtime validators (Zod), TypeScript types/interfaces,\n * DTOs representing API payloads/events, and event contract shapes used across\n * the fishon-captain repository.\n * \n * **Purpose:**\n * Temporary consolidation of all schemas before extraction into a shared package\n * `@fishon/schemas` that can be used across multiple FishOn services.\n * \n * **Usage:**\n * Import schemas and types from this barrel export:\n * ```typescript\n * import { CharterFormValues, charterFormSchema } from '@/schemas';\n * import { VideoUploadStatus, ProcessStatusEnum } from '@/schemas';\n * ```\n * \n * **Next Steps:**\n * 1. Extract these schemas into `@fishon/schemas` package\n * 2. Publish as npm package\n * 3. Update imports across services\n * \n * **Important:**\n * All exported names are preserved from their original locations to maintain\n * backward compatibility. Do not rename exports without coordinating with\n * consuming code.\n */\n\n// Charter schemas\nexport {\n  charterFormSchema,\n  tripSchema,\n  policiesSchema,\n  basicsStepSchema,\n  experienceStepSchema,\n  tripsStepSchema,\n  mediaPricingStepSchema,\n  descriptionStepSchema,\n  type CharterFormValues,\n} from \"./charter\";\n\n// Charter update schemas (API)\nexport { CharterUpdateSchema } from \"./charter-update\";\n\n// Draft schemas\nexport { DraftPatchSchema } from \"./draft\";\n\n// Media schemas\nexport {\n  MediaFileSchema,\n  FinalizeMediaSchema,\n  IncomingMediaSchema,\n  MediaRemovalSchema,\n  VideoThumbnailSchema,\n  normalizeFinalizeMedia,\n  type NormalizedFinalizeMedia,\n} from \"./media\";\n\n// Video schemas\nexport {\n  ProcessStatusEnum,\n  CreateUploadSchema,\n  FinishFormSchema,\n  TranscodePayloadSchema,\n  ListQuerySchema,\n  validateThumbFile,\n  type ProcessStatus,\n} from \"./video\";\n\n// Video upload types\nexport {\n  defaultRetryPolicy,\n  defaultVideoQueueConfig,\n  isActiveUpload,\n  isTerminalUpload,\n  type VideoUploadStatus,\n  type QueuePriority,\n  type QueueAnalytics,\n  type PendingUploadItem,\n  type UploadingUploadItem,\n  type ProcessingUploadItem,\n  type DoneUploadItem,\n  type ErrorDetails,\n  type RetryPolicy,\n  type ProgressDetails,\n  type ErrorUploadItem,\n  type CanceledUploadItem,\n  type VideoUploadItem,\n  type VideoQueueConfig,\n} from \"./video-upload-types\";\n","import { z } from \"zod\";\n\nconst isClient = typeof window !== \"undefined\";\n\nconst fileSchema = z\n  .any()\n  .refine((file) => !isClient || file instanceof File, \"Upload a valid file\");\n\n/**\n * Trip schema - represents a fishing trip offering\n */\nexport const tripSchema = z.object({\n  name: z.string().min(1, \"Trip name is required\"),\n  tripType: z.string().min(1, \"Select a trip type\"),\n  price: z.number().min(0, { message: \"Price must be zero or more\" }),\n  promoPrice: z\n    .number()\n    .min(0, { message: \"Promo/low season price must be zero or more\" })\n    .optional(),\n  durationHours: z\n    .number()\n    .int({ message: \"Duration must be whole hours\" })\n    .min(1, { message: \"At least 1 hour\" }),\n  startTimes: z\n    .array(z.string().regex(/^\\d{2}:\\d{2}$/u, \"Use 24 hour format, e.g. 07:00\"))\n    .min(1, \"Add at least one start time\"),\n  maxAnglers: z\n    .number()\n    .int({ message: \"Whole numbers only\" })\n    .min(1, { message: \"At least 1 angler\" }),\n  charterStyle: z.enum([\"private\", \"shared\"], {\n    error: \"Select charter style\",\n  }),\n  description: z.string().optional(),\n  species: z.array(z.string()).default([]),\n  techniques: z.array(z.string()).default([]),\n});\n\n/**\n * Policies schema - represents charter policies and rules\n */\nexport const policiesSchema = z.object({\n  licenseProvided: z.boolean().optional().default(false),\n  catchAndKeep: z.boolean().optional().default(false),\n  catchAndRelease: z.boolean().optional().default(false),\n  childFriendly: z.boolean().optional().default(false),\n  liveBaitProvided: z.boolean().optional().default(false),\n  alcoholNotAllowed: z.boolean().optional().default(false),\n  smokingNotAllowed: z.boolean().optional().default(false),\n});\n\n/**\n * Main charter form schema\n * Comprehensive validation for charter registration/onboarding\n */\nexport const charterFormSchema = z.object({\n  operator: z.object({\n    // Names + email now sourced from account session (removed fields retained in DB via captainProfile when finalizing)\n    displayName: z.string().min(1, \"Preferred operator name is required\"),\n    experienceYears: z\n      .number()\n      .int({ message: \"Whole numbers only\" })\n      .min(0, { message: \"Years must be zero or more\" }),\n    bio: z.string().min(20, \"Tell anglers about yourself (min 20 characters)\"),\n    phone: z\n      .string()\n      .min(1, \"Phone number is required\")\n      .regex(/^[+]?[-\\d\\s()]{6,}$/u, \"Enter a valid phone number\"),\n    backupPhone: z\n      .string()\n      .min(1)\n      .regex(/^[+]?[-\\d\\s()]{6,}$/u, \"Enter a valid phone number\")\n      .optional()\n      .or(z.literal(\"\")),\n    avatar: fileSchema.optional(),\n    avatarUrl: z.string().url().optional(),\n  }),\n  charterType: z.string().min(1, \"Select a charter type\"),\n  charterName: z.string().min(1, \"Charter name is required\"),\n  state: z.string().min(1, \"Select a state\"),\n  city: z.string().min(1, \"Enter a city/town\"),\n  startingPoint: z.string().min(1, \"Starting point is required\"), // address full string from Places\n  placeId: z.string().optional(), // Optionally later we could add placeId if we want to persist it\n  postcode: z.string().regex(/^\\d{5}$/u, \"Use a 5 digit postcode\"),\n  latitude: z\n    .number()\n    .min(-90, { message: \"Latitude must be between -90 and 90\" })\n    .max(90, { message: \"Latitude must be between -90 and 90\" }),\n  longitude: z\n    .number()\n    .min(-180, { message: \"Longitude must be between -180 and 180\" })\n    .max(180, { message: \"Longitude must be between -180 and 180\" }),\n  // User editable final description (can start from auto-generated). Increase minimum length.\n  description: z\n    .string()\n    .min(40, \"Description should be at least 40 characters\"),\n  // Internal: last generated description baseline for personalization diff.\n  generatedDescription: z.string().optional(),\n  // Tone selection for generator.\n  tone: z.enum([\"friendly\", \"adventurous\", \"professional\"]).default(\"friendly\"),\n  // Service without boat checkbox\n  withoutBoat: z.boolean().optional().default(false),\n  boat: z.object({\n    name: z.string().optional(),\n    type: z.string().optional(),\n    lengthFeet: z\n      .number()\n      .positive({ message: \"Length must be positive\" })\n      .optional(),\n    capacity: z\n      .number()\n      .int({ message: \"Whole numbers only\" })\n      .positive({ message: \"Capacity must be positive\" })\n      .optional(),\n    features: z.array(z.string()).optional().default([]),\n  }),\n  amenities: z.array(z.string()).optional().default([]).optional(),\n  policies: policiesSchema,\n  pickup: z\n    .object({\n      available: z.boolean(),\n      fee: z.number().nullable(),\n      areas: z.array(z.string()),\n      notes: z.string().optional(),\n    })\n    .superRefine((val, ctx) => {\n      if (val.available && !Number.isFinite(val.fee ?? NaN)) {\n        ctx.addIssue({\n          path: [\"fee\"],\n          code: z.ZodIssueCode.custom,\n          message: \"Enter pickup fee\",\n        });\n      }\n    }),\n  trips: z.array(tripSchema).min(1, \"Add at least one trip\"),\n  photos: z\n    .array(fileSchema)\n    .min(3, \"Upload at least 3 photos\")\n    .max(15, \"Maximum 15 photos\"),\n  videos: z\n    .array(fileSchema)\n    .max(10, \"Maximum 10 videos\")\n    .optional()\n    .default([]),\n  // Persisted (already uploaded) media metadata for draft reload (NOT validated as user input fields)\n  uploadedPhotos: z\n    .array(\n      z.object({\n        name: z.string(),\n        url: z.string().url(),\n      })\n    )\n    .optional()\n    .default([]),\n  uploadedVideos: z\n    .array(\n      z.object({\n        name: z.string(),\n        url: z.string().url(),\n      })\n    )\n    .optional()\n    .default([]),\n});\n\nexport type CharterFormValues = z.infer<typeof charterFormSchema>;\n\n// Per-step (subset) schemas for more granular validation if needed client-side\nexport const basicsStepSchema = charterFormSchema.pick({\n  operator: true,\n  charterType: true,\n  charterName: true,\n  state: true,\n  city: true,\n  startingPoint: true,\n  postcode: true,\n  latitude: true,\n  longitude: true,\n});\n\nexport const experienceStepSchema = charterFormSchema.pick({\n  boat: true,\n  amenities: true,\n  policies: true,\n  pickup: true,\n});\n\nexport const tripsStepSchema = charterFormSchema.pick({ trips: true });\n\nexport const mediaPricingStepSchema = charterFormSchema.pick({\n  photos: true,\n  videos: true,\n});\n\n// New dedicated description step schema (moved out of media step)\nexport const descriptionStepSchema = charterFormSchema.pick({\n  description: true,\n  generatedDescription: true,\n  tone: true,\n});\n","import { z } from \"zod\";\n\n/**\n * Schema for partial charter update (edit mode save)\n * Used in PATCH /api/charters/[id] route\n */\nexport const CharterUpdateSchema = z.object({\n  charter: z\n    .object({\n      charterType: z.string().optional(),\n      name: z.string().optional(),\n      state: z.string().optional(),\n      city: z.string().optional(),\n      startingPoint: z.string().optional(),\n      postcode: z.string().optional(),\n      latitude: z.number().nullable().optional(),\n      longitude: z.number().nullable().optional(),\n      description: z.string().optional(),\n      // \"tone\" is a client-only helper for description generation; accept & ignore.\n      tone: z.string().optional(),\n    })\n    .optional(),\n  captain: z\n    .object({\n      displayName: z.string().optional(),\n      phone: z.string().optional(),\n      bio: z.string().optional(),\n      experienceYrs: z.number().int().optional(),\n    })\n    .optional(),\n  boat: z\n    .object({\n      name: z.string().optional(),\n      type: z.string().optional(),\n      lengthFt: z.number().int().nullable().optional(),\n      capacity: z.number().int().nullable().optional(),\n      features: z.array(z.string()).optional(),\n    })\n    .optional(),\n  amenities: z.array(z.string()).optional(),\n  features: z.array(z.string()).optional(),\n  policies: z\n    .object({\n      licenseProvided: z.boolean().optional(),\n      catchAndKeep: z.boolean().optional(),\n      catchAndRelease: z.boolean().optional(),\n      childFriendly: z.boolean().optional(),\n      liveBaitProvided: z.boolean().optional(),\n      alcoholNotAllowed: z.boolean().optional(),\n      smokingNotAllowed: z.boolean().optional(),\n    })\n    .optional(),\n  pickup: z\n    .object({\n      available: z.boolean().optional(),\n      fee: z.number().nullable().optional(),\n      notes: z.string().optional(),\n      areas: z.array(z.string()).optional(),\n    })\n    .optional(),\n  trips: z\n    .array(\n      z.object({\n        id: z.string().nullable().optional(),\n        name: z.string().optional(),\n        tripType: z.string().optional(),\n        price: z.number().nullable().optional(),\n        durationHours: z.number().int().nullable().optional(),\n        maxAnglers: z.number().int().nullable().optional(),\n        style: z.string().optional(),\n        description: z.string().nullable().optional(),\n        startTimes: z.array(z.string()).optional(),\n        species: z.array(z.string()).optional(),\n        techniques: z.array(z.string()).optional(),\n        _delete: z.boolean().optional(),\n      })\n    )\n    .optional(),\n});\n","import { z } from \"zod\";\n\n/**\n * Schema for draft patch payload (server-side validation)\n * Used when updating a charter draft with partial data\n */\nexport const DraftPatchSchema = z.object({\n  dataPartial: z.any(), // already sanitized at merge stage; could be narrowed further per form version\n  clientVersion: z.number().int().nonnegative(),\n  currentStep: z.number().int().min(0).max(10).optional(),\n});\n","import { z } from \"zod\";\n\n/**\n * Media file schema - Generic media file (image or video)\n * Used for finalize media payload validation\n */\nexport const MediaFileSchema = z.object({\n  // 'name' is used as a storage key; allow longer keys to accommodate\n  // directory prefixes (e.g., charters/<id>/media/<file>). Keep generous cap.\n  name: z\n    .string()\n    .min(1)\n    .max(512)\n    .refine(\n      (val) => {\n        // Accept legacy simple filenames (.jpg/.png/.webp) in tests & transitional flows.\n        if (/^[\\w.-]+\\.(jpg|jpeg|png|webp|gif)$/i.test(val)) return true;\n        if (val.startsWith(\"captains/\") && val.includes(\"/avatar/\"))\n          return true;\n        if (val.startsWith(\"verification/\")) return true;\n        if (val.startsWith(\"captains/\") && val.includes(\"/media/\")) return true;\n        if (val.startsWith(\"temp/\") && val.includes(\"/original/\")) return true;\n        if (val.startsWith(\"charters/\") && val.includes(\"/media/\")) return true;\n        return false;\n      },\n      { message: \"Invalid storage key path pattern\" }\n    ),\n  url: z.string().url(),\n  mimeType: z.string().min(3).max(128).optional(),\n  sizeBytes: z\n    .number()\n    .int()\n    .positive()\n    .max(200 * 1024 * 1024)\n    .optional(), // hard ceiling 200MB (videos)\n  width: z.number().int().positive().max(10000).optional(),\n  height: z.number().int().positive().max(10000).optional(),\n});\n\n/**\n * Finalize media schema - Used when finalizing charter with media\n * Includes images, videos, ordering, and cover indices\n */\nexport const FinalizeMediaSchema = z.object({\n  media: z.object({\n    // Allow zero images to support edit re-use of existing media. Create path still enforces >=1 later.\n    images: z.array(MediaFileSchema).max(20),\n    videos: z.array(MediaFileSchema).max(5),\n    imagesOrder: z.array(z.number().int().nonnegative()).optional(),\n    videosOrder: z.array(z.number().int().nonnegative()).optional(),\n    imagesCoverIndex: z.number().int().nonnegative().nullish(),\n    videosCoverIndex: z.number().int().nonnegative().nullish(),\n    avatar: MediaFileSchema.nullable().optional(),\n  }),\n});\n\n/**\n * Normalized finalize media interface\n * Simplified shape consumed by charter creation logic\n */\nexport interface NormalizedFinalizeMedia {\n  images: { name: string; url: string }[];\n  videos: { name: string; url: string }[];\n  imagesOrder?: number[];\n  videosOrder?: number[];\n  imagesCoverIndex?: number;\n  videosCoverIndex?: number;\n  avatar: { name: string; url: string } | null;\n}\n\n/**\n * Normalize finalize media payload\n * Extracts and validates media data from raw payload\n */\nexport function normalizeFinalizeMedia(\n  raw: unknown\n): NormalizedFinalizeMedia | null {\n  if (!raw || typeof raw !== \"object\") return null;\n  const obj = raw as Record<string, unknown>;\n  function pickArray<T = unknown>(key: string): T[] {\n    const v = obj[key];\n    return Array.isArray(v) ? (v as T[]) : [];\n  }\n  function pickNumberArray(key: string): number[] | undefined {\n    const arr = pickArray<number>(key);\n    return arr.length ? arr : undefined;\n  }\n  function pickNumber(key: string): number | undefined {\n    const v = obj[key];\n    return typeof v === \"number\" ? v : undefined;\n  }\n  function pickObj<T = unknown>(key: string): T | null {\n    const v = obj[key];\n    return v && typeof v === \"object\" ? (v as T) : null;\n  }\n  const images = pickArray<{ name: string; url: string }>(\"images\");\n  const videos = pickArray<{ name: string; url: string }>(\"videos\");\n  return {\n    images,\n    videos,\n    imagesOrder: pickNumberArray(\"imagesOrder\"),\n    videosOrder: pickNumberArray(\"videosOrder\"),\n    imagesCoverIndex: pickNumber(\"imagesCoverIndex\"),\n    videosCoverIndex: pickNumber(\"videosCoverIndex\"),\n    avatar: pickObj<{ name: string; url: string }>(\"avatar\"),\n  };\n}\n\n/**\n * Schema for incoming media update (edit mode)\n * Used when updating charter media in edit mode\n */\nexport const IncomingMediaSchema = z.object({\n  media: z.object({\n    images: z\n      .array(\n        z.object({\n          name: z.string().min(1),\n          url: z.string().url(),\n          thumbnailUrl: z.string().url().optional(),\n          durationSeconds: z.number().int().positive().optional(),\n        })\n      )\n      .max(20),\n    videos: z\n      .array(\n        z.object({\n          name: z.string().min(1),\n          url: z.string().url(),\n          thumbnailUrl: z.string().url().optional(),\n          durationSeconds: z.number().int().positive().optional(),\n        })\n      )\n      .max(5),\n    deleteKeys: z.array(z.string()).optional(),\n  }),\n  deleteKeys: z.array(z.string()).optional(),\n  order: z\n    .object({\n      images: z.array(z.number().int().nonnegative()).optional(),\n      videos: z.array(z.number().int().nonnegative()).optional(),\n    })\n    .optional(),\n});\n\n/**\n * Schema for media removal request\n */\nexport const MediaRemovalSchema = z.object({\n  mediaId: z.string().optional(), // direct CharterMedia id\n  storageKey: z.string().optional(), // fallback if id not known yet\n});\n\n/**\n * Schema for video thumbnail upload\n * Used when uploading a custom thumbnail for a video\n */\nexport const VideoThumbnailSchema = z.object({\n  storageKey: z.string().min(1),\n  dataUrl: z\n    .string()\n    .min(50)\n    .refine((v) => v.startsWith(\"data:image/\"), \"must be data:image/* base64\"),\n  durationSeconds: z\n    .number()\n    .int()\n    .positive()\n    .max(60 * 60 * 6)\n    .optional(),\n});\n","import { z } from \"zod\";\n\n/**\n * Video processing status enum\n * Tracks the lifecycle of a video from queue to ready/failed state\n */\nexport const ProcessStatusEnum = z.enum([\n  \"queued\",\n  \"processing\",\n  \"ready\",\n  \"failed\",\n]);\n\nexport type ProcessStatus = z.infer<typeof ProcessStatusEnum>;\n\n/**\n * Schema for creating a new video upload\n * Used when initiating a video upload flow\n * \n * Note: Mobile devices may not set proper MIME types, so we accept:\n * - video/* MIME types\n * - Empty strings (will validate by file extension)\n * - application/octet-stream (generic fallback used by some mobile browsers)\n */\nexport const CreateUploadSchema = z.object({\n  fileName: z.string().min(1).max(256),\n  fileType: z.string().refine(\n    (type) => {\n      // Accept empty string (fallback to extension check)\n      if (type === \"\") return true;\n      // Accept video/* MIME types\n      if (type.startsWith(\"video/\")) return true;\n      // Accept generic MIME type used by mobile browsers\n      if (type === \"application/octet-stream\") return true;\n      return false;\n    },\n    { message: \"Must be a video file\" }\n  ),\n});\n\n/**\n * Schema for finishing/finalizing a video upload\n * Includes trim metadata and processing details\n */\nexport const FinishFormSchema = z.object({\n  videoUrl: z.string().url(),\n  startSec: z.number().min(0).max(86400),\n  // Added optional endSec (exclusive) to allow backend to know trimmed selection length\n  endSec: z.number().min(0).max(86400).optional(),\n  // Added metadata fields to support bypass logic and metrics\n  width: z.number().min(0).max(10000).optional(),\n  height: z.number().min(0).max(10000).optional(),\n  originalDurationSec: z.number().min(0).max(86400).optional(),\n  ownerId: z.string().min(1),\n  didFallback: z.boolean().optional(),\n  fallbackReason: z.string().max(300).optional(),\n});\n\n/**\n * Schema for video transcoding payload sent to worker\n */\nexport const TranscodePayloadSchema = z.object({\n  videoUrl: z.string().url(),\n  startSec: z.number().min(0).max(86400),\n  videoId: z.string().min(1),\n});\n\n/**\n * Schema for listing videos by owner\n */\nexport const ListQuerySchema = z.object({\n  ownerId: z.string().min(1),\n});\n\n/**\n * Validate thumbnail file constraints\n * @param file - File to validate\n * @returns true if valid, false otherwise\n */\nexport function validateThumbFile(file: File) {\n  const allowed = [\"image/jpeg\", \"image/jpg\", \"image/webp\"];\n  if (!allowed.includes(file.type)) return false;\n  if (file.size > 2 * 1024 * 1024) return false; // 2MB\n  return true;\n}\n\n/**\n * Supported video file extensions by category\n * Used for fallback validation when MIME type is unavailable or incorrect\n */\nconst SUPPORTED_VIDEO_EXTENSIONS = [\n  // Modern web formats\n  \"mp4\", \"webm\", \"ogg\",\n  // Apple formats\n  \"mov\", \"m4v\", \"m4p\",\n  // Mobile formats (Android)\n  \"3gp\", \"3gpp\",\n  // Legacy/Desktop formats\n  \"avi\", \"mkv\", \"flv\", \"wmv\",\n  // MPEG variants\n  \"mpg\", \"mpeg\", \"mpe\", \"mpv\", \"m2v\",\n  // Transport streams\n  \"m2ts\", \"mts\"\n];\n\n/**\n * Pre-compiled regex for video file extension validation\n * Cached for performance to avoid recompilation on every call\n */\nconst VIDEO_EXTENSION_REGEX = new RegExp(\n  `\\\\.(${SUPPORTED_VIDEO_EXTENSIONS.join(\"|\")})$`,\n  \"i\"\n);\n\n/**\n * Validate video file type\n * Mobile-friendly validation that checks both MIME type and file extension\n * \n * @param file - File to validate\n * @returns true if valid video file, false otherwise\n * \n * @remarks\n * Mobile devices (especially iOS) may not set proper MIME types or may use:\n * - Empty string\n * - \"application/octet-stream\"\n * - Incorrect MIME types (e.g., \"audio/mpeg\" for .mp4 files)\n * - Unexpected video MIME types like \"video/quicktime\" for .mov files\n * \n * Strategy:\n * 1. If MIME type is video/*, accept immediately (most reliable case)\n * 2. Always check file extension as fallback (handles empty/wrong/generic MIME types)\n * \n * This intentionally allows files with wrong MIME types if they have valid video extensions,\n * as mobile browsers frequently misreport MIME types.\n */\nexport function isValidVideoFile(file: File): boolean {\n  // Fast path: If MIME type is valid video type, accept immediately\n  if (file.type && file.type.startsWith(\"video/\")) {\n    return true;\n  }\n  \n  // Fallback: Check file extension for common video formats\n  // This handles: empty MIME, application/octet-stream, wrong MIME types\n  return VIDEO_EXTENSION_REGEX.test(file.name);\n}\n","/**\n * Centralized video upload domain types\n * These types model the lifecycle of a short-form video upload within the new queue system.\n */\n\nexport type VideoUploadStatus =\n  | \"pending\"\n  | \"uploading\"\n  | \"processing\"\n  | \"done\"\n  | \"error\"\n  | \"canceled\";\n\nexport type QueuePriority = \"low\" | \"normal\" | \"high\" | \"urgent\";\n\nexport interface QueueAnalytics {\n  totalItems: number;\n  activeUploads: number;\n  completedUploads: number;\n  failedUploads: number;\n  averageUploadTime: number;\n  totalBytesUploaded: number;\n  queueWaitTime: number;\n}\n\n// Common metadata shared across all lifecycle states.\ninterface BaseVideoUploadItem {\n  id: string;\n  file: File; // Original file reference (kept for retries or trimming later)\n  sizeBytes: number;\n  createdAt: number; // epoch ms\n  progress: number; // 0..1 user-facing progress (upload portion only for now)\n  priority: QueuePriority;\n  queuePosition?: number;\n  // Placeholder for future trimming / fallback metadata (populated pre-upload in later phases)\n  trim?: {\n    startSec: number;\n    endSec: number;\n    // Added: metadata captured at trim time for bypass & analytics\n    width?: number; // source width\n    height?: number; // source height\n    originalDurationSec?: number; // full source duration before trimming\n    didFallback?: boolean;\n    fallbackReason?: string | null;\n  };\n}\n\nexport interface PendingUploadItem extends BaseVideoUploadItem {\n  status: \"pending\";\n  progress: 0; // always 0 until XHR begins\n}\n\nexport interface UploadingUploadItem extends BaseVideoUploadItem {\n  status: \"uploading\";\n  startedAt: number; // epoch ms\n  progress: number; // 0..1 upload progress\n  progressDetails?: ProgressDetails;\n}\n\nexport interface ProcessingUploadItem extends BaseVideoUploadItem {\n  status: \"processing\";\n  startedAt: number;\n  uploadedAt: number;\n  progress: number; // 0.85..1 during processing stages\n  blobKey: string;\n  videoUrl: string; // temporary blob URL\n  progressDetails?: ProgressDetails;\n}\n\nexport interface DoneUploadItem extends BaseVideoUploadItem {\n  status: \"done\";\n  startedAt: number;\n  uploadedAt: number;\n  completedAt: number; // finish persisted\n  progress: 1;\n  blobKey: string;\n  videoUrl: string;\n}\n\nexport interface ErrorDetails {\n  code: string;\n  message: string;\n  category: \"network\" | \"server\" | \"client\" | \"validation\";\n  recoverable: boolean;\n  retryAfter?: number; // seconds\n  details?: Record<string, unknown>;\n}\n\nexport interface RetryPolicy {\n  maxAttempts: number;\n  baseDelayMs: number;\n  maxDelayMs: number;\n  backoffMultiplier: number;\n  jitterEnabled: boolean;\n}\n\nexport interface ProgressDetails {\n  phase: \"uploading\" | \"processing\" | \"finalizing\";\n  bytesUploaded: number;\n  totalBytes: number;\n  transferSpeed?: number; // bytes per second\n  estimatedTimeRemaining?: number; // seconds\n  chunkProgress?: {\n    completed: number;\n    total: number;\n  };\n}\n\nexport interface ErrorUploadItem extends BaseVideoUploadItem {\n  status: \"error\";\n  progress: number; // may be partial\n  startedAt?: number;\n  uploadedAt?: number;\n  blobKey?: string;\n  videoUrl?: string;\n  error: string;\n  errorDetails?: ErrorDetails;\n  retryCount?: number;\n  lastRetryAt?: number;\n}\n\nexport interface CanceledUploadItem extends BaseVideoUploadItem {\n  status: \"canceled\";\n  progress: number; // snapshot of progress at cancel time (0 if pending)\n  startedAt?: number;\n  canceledAt: number;\n}\n\nexport type VideoUploadItem =\n  | PendingUploadItem\n  | UploadingUploadItem\n  | ProcessingUploadItem\n  | DoneUploadItem\n  | ErrorUploadItem\n  | CanceledUploadItem;\n\n// Queue configuration\nexport interface VideoQueueConfig {\n  maxConcurrent: number;\n  captureThumbnail: boolean;\n  autoStart: boolean;\n  maxQueueSize: number;\n  cleanupPolicy: {\n    maxCompletedItems: number;\n    maxFailedItems: number;\n    autoCleanupAfterMs: number;\n  };\n  priorityWeights: {\n    urgent: number;\n    high: number;\n    normal: number;\n    low: number;\n  };\n  analytics: {\n    enabled: boolean;\n    sampleRate: number; // 0-1, percentage of operations to track\n  };\n  retryPolicy?: {\n    maxAttempts: number;\n    baseDelayMs: number;\n    maxDelayMs: number;\n    backoffMultiplier: number;\n    jitterEnabled: boolean;\n  };\n  progressTracking?: {\n    enableSpeedCalculation: boolean;\n    speedSampleWindowMs: number;\n    enableTimeEstimation: boolean;\n  };\n}\n\nexport const defaultRetryPolicy: RetryPolicy = {\n  maxAttempts: 3,\n  baseDelayMs: 1000,\n  maxDelayMs: 30000,\n  backoffMultiplier: 2,\n  jitterEnabled: true,\n};\n\nexport const defaultVideoQueueConfig: VideoQueueConfig = {\n  maxConcurrent: 2,\n  captureThumbnail: true,\n  autoStart: false,\n  maxQueueSize: 20,\n  cleanupPolicy: {\n    maxCompletedItems: 5,\n    maxFailedItems: 3,\n    autoCleanupAfterMs: 5 * 60 * 1000, // 5 minutes\n  },\n  priorityWeights: {\n    urgent: 1000,\n    high: 100,\n    normal: 10,\n    low: 1,\n  },\n  analytics: {\n    enabled: true,\n    sampleRate: 0.1, // Track 10% of operations\n  },\n  retryPolicy: {\n    maxAttempts: 3,\n    baseDelayMs: 1000,\n    maxDelayMs: 30000,\n    backoffMultiplier: 2,\n    jitterEnabled: true,\n  },\n  progressTracking: {\n    enableSpeedCalculation: true,\n    speedSampleWindowMs: 5000,\n    enableTimeEstimation: true,\n  },\n};\n\n// Narrowing helpers (optional ergonomics for consumers)\nexport const isActiveUpload = (i: VideoUploadItem) =>\n  i.status === \"uploading\" || i.status === \"processing\";\nexport const isTerminalUpload = (i: VideoUploadItem) =>\n  i.status === \"done\" || i.status === \"error\" || i.status === \"canceled\";\n"],"mappings":"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","names":["import_zod","import_zod","import_zod","import_zod"]}